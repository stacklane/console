@import "/style/variables";

///////

@import "/bulma/utilities/all";

@import "/bulma/base/_all";

@import "/bulma/elements/box";
@import "/bulma/elements/button";
@import "/bulma/elements/container";
@import "/bulma/elements/icon";
@import "/bulma/elements/image";
@import "/bulma/elements/notification";
@import "/bulma/elements/tag";
@import "/bulma/elements/title";
@import "/bulma/elements/table";
@import "/bulma/elements/other";

//@import "/bulma/components/card";
@import "/bulma/components/dropdown";
@import "/bulma/components/media";
@import "/bulma/components/navbar";
@import "/bulma/components/tabs";
@import "/bulma/components/modal";
@import "/bulma/components/message";
@import "/bulma/components/level";
//@import "/bulma/grid/tiles";

@import "/bulma/grid/columns";

@import "/bulma/form/_all";

////////

@import "/style/ext/check-radio";

@import "/js/app/hiding";
@import "/js/app/form";
@import "/js/app/message";
@import "/js/app/progress";
@import "/js/app/tabs";
@import "/js/app/filter";
@import "/js/app/format";
@import "/js/app/get";
@import "/js/app/stripe-card";

////////////

$max-ui-width: 1200px;

$main-padding-top: .5rem;
$main-padding-side: .75rem;

$nav-text-color: $grey-darker;
$nav-active-color: $link;

$button-transition: background-color 200ms ease, box-shadow 200ms ease;

////////////

@import "/style/prism";
@import "/style/toggler";
@import "/style/simple-list";
@import "/style/box-card";
@import "/style/box";
@import "/style/sidebar";

////////////

.logo.is-logo-color-mono-dark{
  svg{
    fill: $grey-dark;
  }

  a:hover{
    svg {
      fill: $blue;
    }
  }
}

.button{
  transition: $button-transition;

  &:hover {
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
  }
}

.has-flex-centered{
  display:flex;
  justify-content: center;
}

.has-multiple-form-buttons form{
  display: inline;
}

a{
  font-weight: 500;
}

.modal-card-foot.has-text-right{
  justify-content: flex-end;
}

/**
 * Why needed to display drop down arrow?  This code already exists in _form.scss
 */
.select:not(.is-multiple):not(.is-loading)::after {
  border-color: $link;
  right: 1.125em;
  z-index: 4;
}

@include desktop() {
  body > header, main {
    max-width: $max-ui-width;
    margin-left: auto;
    margin-right: auto;
  }
}


/**
 * header
 */
body > header {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  z-index: $zindex-sticky;
  color: $nav-text-color;

  .navbar{
    padding-top: 0px;
    padding-left: $main-padding-side - .5rem;
    padding-right: $main-padding-side - .5rem;

    &.is-transparent{
      background: transparent;
      background: $body-background-color; // same, so that the header doesn't appear transparent when scrolling with 'sticky'
    }

    @include desktop {
      padding-top: $main-padding-top;
      padding-left: ($main-padding-side * 2) - .5rem;
      padding-right: ($main-padding-side * 2) - .5rem;
    }

    .navbar-dropdown{
      a.navbar-item{
        color: $link;
        padding: 0.375rem 1rem; // Reset odd default Bulma padding -- see _navbar.scss

        &:hover{
          color: $link-hover;
          background-color: $offset-color !important;
        }
      }
    }

    .navbar-brand{
      margin-left: -.6rem; // Looks better
    }

    .is-nav-title{
      font-size: 16px;
      font-weight: 500;
      color: $nav-text-color;
    }

    .navbar-item.is-special {
      &:hover {
        .is-special-container {
          background: white !important;
          box-shadow: $shadow-for-bg;
        }
      }

      .is-special-container{
        box-shadow: $shadow-for-bg-small;
        background: white;
        height: $icon-dimensions-medium;
        width: $icon-dimensions-medium;
        border-radius: $radius-rounded;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: $button-transition;

        .icon svg {
          fill: $icon-ui-accent-color;

          .icon-accent {
            opacity: 1;
            fill: $icon-ui-accent-color;
            stroke: $icon-ui-accent-color; // unclear why this is needed
          }
        }
      }
    }

    /**
     * <span class='icon'>...</span>
     * <span>text</span>
     * ensures spacing between the two
     */
    a.navbar-item>.icon:not(:last-child) {
      margin-left: -.25em;
      margin-right: .25em;
    }
  }
}

/**
 * main
 */
main{
  padding: $main-padding-top $main-padding-side $main-padding-side;
}
@include desktop {
  main {
    padding: $main-padding-top ($main-padding-side * 2) ($main-padding-side * 2);
  }
}

/**
 * .no-select
 */
.no-select {
  @include unselectable;
}


/**
 * .fade
 * .fade.show
 *
 * Full opacity toggle with transition

$transition-fade:  opacity .15s linear !default;
.fade {
  opacity: 0;
  transition: $transition-fade;

  &.show {
    opacity: 1;
  }
}*/

/**
 * .container
 */
.container{
  padding-left: 12px;
  padding-right: 12px;
}
@include tablet(){
  padding-left: 15px;
  padding-right: 15px;
}

/**
 * .icon > .svg
 */
/* problematic for form input icons
.icon > svg{
  width: 100%;
  height: 100%;
}*/
.icon {
  > svg{
    height: $icon-dimensions;
    width: $icon-dimensions;
  }

  &.is-small > svg{
    height: $icon-dimensions-small;
    width: $icon-dimensions-small;
  }

  &.is-medium > svg {
    height: $icon-dimensions-medium;
    width: $icon-dimensions-medium;
  }

  &.is-large > svg{
    height: $icon-dimensions-large;
    width: $icon-dimensions-large;
  }

  &.is-micro{
    width: .75rem;
    height: .75rem;
  }
}
.media-left > .icon {
  /**
   * Typical case is a *single* icon in media-left (only element),
   * and block is working much better than inline-block in that case at
   * not adding some unexpected spacing. flex might also work.
   */
  display: block;
}

/**
 * .is-icon-ui
 */
.icon.is-icon-ui {
  svg {
    fill: $icon-ui-color;

    .icon-accent {
      fill: $icon-ui-accent-color;
      opacity: $icon-ui-accent-opacity
    }
  }
}
a:hover {
  .is-icon-ui {
    svg {
      .icon-accent {
        fill: rgb(139, 152, 168); // TODO get into variables
      }
    }
  }
}
.is-active /* any ancestor */ .icon.is-icon-ui > svg,
.is-active.icon.is-icon-ui > svg{
  @include icon-svg-active;
}

/**
 * .icon > svg .has-text-X variations
 *
 * Adapted from bulma logic for .has-text-X
 */
@each $name, $shade in $shades {
  .has-text-#{$name} .icon > svg, .has-text-#{$name}.icon > svg{
    fill: $shade !important;
  }
}
@each $name, $pair in $colors { //
  $color: nth($pair, 1);

  .has-text-#{$name} .icon > svg, .has-text-#{$name}.icon > svg{
    fill: $color !important;
  }
}
a:hover .has-text-link.icon > svg{
  fill: $link-hover !important;
}


/**
 * Make an input look like surrounding text

 * Recommend:
   autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" data-gramm="false"

   and readonly
    as needed.
 */
input{
  &.is-display {
    font-size: inherit;
    font-weight: inherit;
    padding: 0px;
    border: 0px;
    display: inline-block;
    min-width: 50%; // TBD
  }
}

/**
 * .is-revealable / .is-revealer
 */
.is-revealer:hover .is-revealed{
  visibility: visible;
}
.is-revealed{
  visibility: hidden;
}

/**
 * .card
 */
.card{
  border-radius: $card-radius;
}

/**
 * a.card use is-block instead
 */
//a.card{
 // display:block;
//}

/**
 * .card-functions
 */
.card-content + .card-functions{
  position: absolute;
  /** == .card-content padding **/
  right: 1.5rem;
  top: 1.5rem;
}

/**
 * .is-hoverable
 */
$hoverable-transition: box-shadow .2s ease-in-out;
$hoverable-shadow: $card-shadow-hover;
.is-hoverable, a.box /* override */, a.card /* make consistent with a.box */{
  //display:block; // Use is-block as needed instead
  //text-decoration: none !important;
  transition: $hoverable-transition;
  will-change: box-shadow;

  &:hover, &:focus, &:active{
    box-shadow: $hoverable-shadow;
  }

  &[disabled]{
    pointer-events: none !important; // Disables hovering and clicking.
  }
}

/**
 * .card-footer.is-small
 */
.card-footer.is-small{
  border-top: 1px solid rgba(0,0,0,0.05);
  margin-left: .5rem;
  margin-right: .5rem;
  padding: 0.1rem;
}

/**
 * .is-proposed
 *
 * A kind of virtual card -- a card that could be, usually for "add/new".
 */
$proposed-transition: opacity .2s ease-in-out;
.is-proposed{
  opacity: .7;
  //border: 1px rgba(0,0,0,.2) dashed;
  transition: $proposed-transition;
  will-change: opacity;

  &:hover{
    opacity: 1;
  }
}
.is-proposed.is-hoverable{
  transition: $hoverable-transition, $proposed-transition;
  will-change: opacity, box-shadow;
}


/**
 * Nested .box (non-root)
 */
.box .box{
  box-shadow: $shadow-for-bg-small; // looks better than $shadow-X
}



